generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String       @unique
  password    String
  email       String
  vendorId  String?
  roleId      String       
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserVendor UserVendor[]
  Role        Role         @relation(fields: [roleId], references: [id])
  Order       Order[]
  @@map("users")
}

model Vendor {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime   ?
  UserVendor UserVendor[]
  Product     Product[]
  Category    Category[]
  CartItem    CartItem[]  // Inverse relation to CartItem
  OrderItem   OrderItem[] // Inverse relation to OrderItem
  Subscription Subscription[]
  @@map("companies")
}

model UserVendor {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  vendorId    String
  role        String
  permissions String[]
  deletedAt   DateTime   ?   // Use Date? for optional date fields
  createdAt   DateTime    @default(now()) // Use Date for date fields
  updatedAt   DateTime    @updatedAt // Use Date for date fields
  User        User     @relation(fields: [userId], references: [id])
  Vendor     Vendor  @relation(fields: [vendorId], references: [id])
  @@map("user_companies")
}


model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  categoryId  String
  currencyType String
  images      String[]
  vendorId  String
  stock       Int      @default(0) // Stock quantity
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  Vendor     Vendor  @relation(fields: [vendorId], references: [id])
  Category    Category @relation(fields: [categoryId], references: [id])
  CartItem    CartItem[]  // Inverse relation to CartItem
  OrderItem   OrderItem[] // Inverse relation to OrderItem
  @@map("products")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  vendorId  String
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  Vendor     Vendor      @relation(fields: [vendorId], references: [id])
  Subcategories Category[] @relation("Subcategories")
  Parent       Category?   @relation("Subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Product     Product[]
  @@map("categories")
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String          @unique
  Permissions RolePermission[]
  User        User[]
  deletedAt   DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  @@map("roles")
}

model Permission {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String          @unique
  description String?
  Roles       RolePermission[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  @@map("permissions")
}

model RolePermission {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String
  permissionId String
  Role         Role        @relation(fields: [roleId], references: [id])
  Permission   Permission  @relation(fields: [permissionId], references: [id])
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Subscription {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  vendorId  String
  packageId   String
  startDate   DateTime  @default(now())
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  Vendor      Vendor   @relation(fields: [vendorId], references: [id])
  Package     Package   @relation(fields: [packageId], references: [id])
  @@map("subscriptions")
}

model Package {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  currencyType String
  duration    Int       // Duration in days
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  Subscription Subscription[]
  @@map("packages")
}

model Cart {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId    
  sessionId String?   // To track carts for anonymous users
  status    String    @default("OPEN") // Status of the cart: OPEN, COMPLETED, CANCELLED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  CartItem  CartItem[]
  @@map("carts")
  @@index([sessionId, status])
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String
  productId String
  vendorId  String
  invoiceId String?  // Add this field if linking to Invoice
  quantity  Int
  Cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id]) // Add this if linking to Invoice
  Vendor   Vendor   @relation(fields: [vendorId], references: [id])
  @@map("cart_items")
}


model Order {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  total     Float
  paymentMethod String
  paymentStatus String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  OrderItem OrderItem[]
  User      User       @relation(fields: [userId], references: [id])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  productId String
  vendorId  String
  quantity  Int
  Order     Order    @relation(fields: [orderId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  Vendor   Vendor   @relation(fields: [vendorId], references: [id])
  @@map("order_items")
}


model Invoice {
  id  String   @id @default(auto()) @map("_id") @db.ObjectId
  customerName String 
  phoneNumber String
  paymentType String
  subTotal Float
  tax Float
  totalAmount Float
  CartItem CartItem[]
}
